// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesApp.Contexts;

#nullable disable

namespace SalesApp.Migrations
{
    [DbContext(typeof(SalesAppContext))]
    [Migration("20240319193408_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("SalesApp.Models.DB.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountExecutiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("SolutionEngineerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountExecutiveId");

                    b.HasIndex("SolutionEngineerId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SalesApp.Models.DB.AccountExecutive", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccountExecutives");
                });

            modelBuilder.Entity("SalesApp.Models.DB.AccountProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProductId");

                    b.ToTable("AccountProducts");
                });

            modelBuilder.Entity("SalesApp.Models.DB.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SalesApp.Models.DB.SOW", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Sows");
                });

            modelBuilder.Entity("SalesApp.Models.DB.SOWProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Discount")
                        .HasColumnType("TEXT");

                    b.Property<long>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SowId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SowId");

                    b.ToTable("SowProducts");
                });

            modelBuilder.Entity("SalesApp.Models.DB.SolutionEngineer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SolutionEngineers");
                });

            modelBuilder.Entity("SalesApp.Models.DB.Account", b =>
                {
                    b.HasOne("SalesApp.Models.DB.AccountExecutive", "AccountExecutive")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountExecutiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesApp.Models.DB.SolutionEngineer", "SolutionEngineer")
                        .WithMany("Accounts")
                        .HasForeignKey("SolutionEngineerId");

                    b.Navigation("AccountExecutive");

                    b.Navigation("SolutionEngineer");
                });

            modelBuilder.Entity("SalesApp.Models.DB.AccountProduct", b =>
                {
                    b.HasOne("SalesApp.Models.DB.Account", "Account")
                        .WithMany("AccountProducts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesApp.Models.DB.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesApp.Models.DB.SOW", b =>
                {
                    b.HasOne("SalesApp.Models.DB.Account", null)
                        .WithMany("Sows")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("SalesApp.Models.DB.SOWProduct", b =>
                {
                    b.HasOne("SalesApp.Models.DB.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesApp.Models.DB.SOW", "Sow")
                        .WithMany("SowProducts")
                        .HasForeignKey("SowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sow");
                });

            modelBuilder.Entity("SalesApp.Models.DB.Account", b =>
                {
                    b.Navigation("AccountProducts");

                    b.Navigation("Sows");
                });

            modelBuilder.Entity("SalesApp.Models.DB.AccountExecutive", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("SalesApp.Models.DB.SOW", b =>
                {
                    b.Navigation("SowProducts");
                });

            modelBuilder.Entity("SalesApp.Models.DB.SolutionEngineer", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
